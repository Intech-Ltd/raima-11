<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="SQL API|ADO.NET User's Guide" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Introduction</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#ADO/Introduction.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbRSQL.htm">SQL API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="dbADO.htm">ADO.NET User's Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Introduction</span>
        </div>
        <h1 class="firstHeading">Introduction</h1>
        <p>The <span class="MyVariablesProductShortName">RDM</span> database management system (DBMS) is designed to provide powerful, flexible, high-performance capabilities for developing embedded database applications. By combining the network and relational model technologies in a single system, <span class="MyVariablesProductShortName">RDM</span> lets you organize and access information efficiently, regardless of the complexity of the data. The Native <span class="MyVariablesProductShortName">RDM</span> C API provides an efficient low-level interface with a rich set of functionality.</p>
        <p>The ADO.NET interface to <span class="MyVariablesProductShortName">RDM</span> is designed to allow developers to access this powerful DBMS from ADO.NET and therefore from any application running in the CLR and from any .NET language.</p>
        <p>This interface is an ADO.NET Data Provider and can integrate into the .NET DbProviderFactories ability or can be referenced directly.  The following classes encompass the <span class="MyVariablesProductShortName">RDM</span> Data Provider.</p>
        <ul>
            <li value="1"><a href="Connection/RdmConnection.htm">RdmConnection class</a>
            </li>
            <li value="2"><a href="ConnectionStringBuilder/RdmConnectionStringBuilder.htm">RdmConnectionStringBuilder Class</a>
            </li>
            <li value="3"><a href="Command/RdmCommand.htm">RdmCommand class</a>
            </li>
            <li value="4"><a href="DataReader/RdmDataReader.htm">RdmDataReader class</a>
            </li>
            <li value="5"><a href="Parameter/RdmParameter.htm">RdmParameter class</a>
            </li>
            <li value="6"><a href="ParameterCollection/RdmParameterCollection.htm">RdmParameterCollection class</a>
            </li>
            <li value="7"><a href="DataAdapter/RdmDataAdapter.htm">RdmDataAdapter class</a>
            </li>
            <li value="8"><a href="Transaction/RdmTransaction.htm">RdmTransaction class</a>
            </li>
            <li value="9"><a href="Exception/RdmException.htm">RdmException Class</a>
            </li>
            <li value="10"><a href="Class/RdmType.htm">RdmType enumeration</a>
            </li>
            <li value="11"><a href="Class/RdmDateFormat.htm">RdmDateFormat enumeration</a>
            </li>
            <li value="12"><a href="RowUpdatedEventArgs/RdmRowUpdatedEventArgs.htm">RdmRowUpdatedEventArgs class</a>
            </li>
            <li value="13"><a href="RowUpdatingEventArgs/RdmRowUpdatingEventArgs.htm">RdmRowUpdatingEventArgs class</a>
            </li>
            <li value="14"><a href="RdmRowUpdatedEventHandler.htm">RdmRowUpdatedEventHandler delegate</a>
            </li>
            <li value="15"><a href="RdmRowUpdatingEventHandler.htm">RdmRowUpdatingEventHandler delegate</a>
            </li>
        </ul>
        <h2><a name="Basic"></a>Basic ADO.NET Application Steps</h2>
        <p>An ADO.NET C# application program consists of a set of calls to the ADO.NET API functions in a particular sequence as outlined below.</p>
        <ol>
            <li value="1">Set up and initialize your application’s use of the ADO.NET API as follows.<ol style="list-style-type: lower-alpha;"><li value="1">Create a String object to define your connection string in the following format: "<code>host=localhost;database=hello_worldADO</code>"</li><li value="2">Create an <a href="Connection/RdmConnection.htm">RdmConnection</a> object to handle your connection to the Raima database system and pass in your connection string to the constructor.</li><li value="3">Create an <a href="Command/RdmCommand.htm">RdmCommand</a> object to handle your SQL commands you wish to use to interact with the <span class="MyVariablesProductShortName">RDM</span> database system.</li><li value="4">Create an <a href="Transaction/RdmTransaction.htm">RdmTransaction</a> object to handle your transactions within the <span class="MyVariablesProductShortName">RDM</span> database system.</li><li value="5">Create an <a href="DataReader/RdmDataReader.htm">RdmDataReader</a> object to handle reading out data from the <span class="MyVariablesProductShortName">RDM</span> database system.</li><li value="6">Call the Open function of the <a href="Connection/RdmConnection.htm">RdmConnection</a>  object in order to open your database.</li></ol></li>
            <li value="2">Prepare your application to execute SQL statements as follows.<ol style="list-style-type: lower-alpha;"><li value="1">Set the <a href="Command/Property/CommandText.htm">CommandText</a> property of the <a href="Command/RdmCommand.htm">RdmCommand</a> object to define the SQL statement that will need to be executed by your application.</li><li value="2">Create some <a href="Parameter/RdmParameter.htm">RdmParameter</a>  objects for any parameters you will need for any parameter markers that were specified in the SQL statements defined in the prior step.</li><li value="3">Call the Parameters.Add(param) to bind your application’s variables to any parameters created in step b.</li></ol></li>
            <li value="3">At this point your application is execution ready. That means that your application will …<ol style="list-style-type: lower-alpha;"><li value="1">Call <a href="Command/Method/ExecuteNonQuery.htm">ExecuteNonQuery</a> on the <a href="Command/RdmCommand.htm">RdmCommand</a>  object to execute the appropriate statements that implement the database access needs for each particular function. Alternatively you can call <a href="Command/Method/ExecuteScalar.htm">ExecuteScalar</a> to execute a statement and return the first column of the first row of results.</li><li value="2">Call transaction statements using the <a href="Transaction/RdmTransaction.htm">RdmTransaction</a> class in order to start the transaction, commit the transaction, create a savepoint, or rollback a transaction.</li><li value="3">Call ExecuteReader to retrieve the result rows from an executed select statement.  You iterate over the results using the <a href="DataReader/RdmDataReader.htm">RdmDataReader</a> object.</li></ol></li>
            <li value="4">When your application is ready to terminate you need to…<ol style="list-style-type: lower-alpha;"><li value="1">Call Close on the <a href="DataReader/RdmDataReader.htm">RdmDataReader</a> object you used if you read from one.</li><li value="2">Call Close on the <a href="Connection/RdmConnection.htm">RdmConnection</a>  object to close the connection to your database.</li></ol></li>
        </ol>
        <h2>Hello World!</h2>
        <p>If you follow the basic procedure listed above you can easily create a simple database where you insert some data and the retrieve the data to be displayed back out. This can be seen with the common Hello World example.</p>
        <p>In the example below return codes are mostly ignored for simplicity. This will be ok because we know what the expected results are.</p><pre xml:space="preserve">/*********************************************************************
**    HELLO WORLD ADO.NET
**    ---------------
**    This document describes the process to open a simple database, insert a record 
**    containing a text field, read the text field from database and print it out.
**********************************************************************/

using System;
using Raima.Rdm;   /* The RDM ADO.NET API */
using System.Data;

namespace HelloWorldApplication
{
    class HelloWorld
    {
        static void Main()
        {
            /* Setup connection and SQL query strings */
            string connectionString =
                "host=localhost;database=hello_worldADO";
            string insertString = "INSERT INTO info(myChar) VALUES('Hello World!')";
            string queryString = "SELECT myChar FROM info";
            
            /* Create connection object to connect to the database */
            RdmConnection connection = new RdmConnection(connectionString)
            /* Create a command object to call SQL queries */
            RdmCommand command = connection.CreateCommand();
            /* Create a transaction object to start and stop transactions */
            RdmTransaction rdmtrans = null;
            /* Create a reader object to read out data from the SQL query */
            RdmDataReader reader = null;

            try
            {
                /* Open a connection to the database */
                connection.Open();
                
                /* Start a transaction */
                rdmtrans = connection.BeginTransaction();
                /* Set the SQL query to the insert one */
                command.CommandText = insertString;
                /* Execute the query */
                command.ExecuteNonQuery();
                /* Commit the transaction */
                rdmtrans.Commit();

                /* Set the SQL query to the select one */
                command.CommandText = queryString;
                /* Execute a select statement which should return results */
                reader = command.ExecuteReader();
                /* Read all of the results */
                while (reader.Read())
                {
                    /* Print out each row of the select in a newline*/
                    Console.WriteLine(reader[0]);
                }
                /* Close the reader since retrieved all rows*/
                reader.Close();
                /* Close the connection */
                connection.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
</pre>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright © 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#ADO/Introduction.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>