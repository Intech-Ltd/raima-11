<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="SQL API|JDBC User's Guide" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Introduction</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/TableStyles/BasicTwoCol.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#JAVARM/JDBC.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbRSQL.htm">SQL API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="dbJDBC.htm">JDBC User's Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Introduction</span>
        </div>
        <h1 class="firstHeading">Introduction</h1>
        <p>The JDBC API provides a SQL interface to the RDM database. The packages <code>java.sql</code> and <code>javax.sql</code> are implemented based on the specification for Java Version 6</p>
        <p>There are two modes of operation for this interface. The first is through TCP/IP and the second is a Direct Link through JNI. When using TCP/IP the <b>rdmsqlserver</b> must be running before a connection to the database is made. When a direct link through JNI is made, the <code>rdmjdbcjni<span class="MyVariablesLibraryVersion">11</span></code> shared library must be included. These modes are accessed by changing the connection URL as follows:</p>
        <p>TCP/IP : "<code>jdbc:raima:rdm://localhost</code>"</p>
        <p>Direct Link: "<code>jdbc:raima:rdm://local</code>"</p>
        <p>More information can be found at <a href="Driver/Method/connect.htm">RDMDriver.connect()</a>.</p>
        <h2>Package java.sql</h2>
        <p class="Heading">Supported Interfaces</p>
        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../Resources/TableStyles/BasicTwoCol.css');caption-side: top;" class="TableStyle-BasicTwoCol" cellspacing="0">
            <col class="Column-Column1" style="width: 180px;" />
            <col class="Column-Column2" style="width: 190px;" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <th class="HeadE-Column1-Header1">Interface Summary</th>
                    <th class="HeadE-Column2-Header1">&#160;</th>
                    <th class="HeadD-Column1-Header1">&#160;</th>
                </tr>
                <tr class="Head-Header1">
                    <th class="HeadE-Column1-Header1"><span class="MyVariablesShortCompanyName">Raima</span>&#160;Class</th>
                    <th class="HeadE-Column2-Header1">Implements</th>
                    <th class="HeadD-Column1-Header1">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="Blob/RDMBlob.htm">RDMBlob</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/Blob.html" target="_blank">Blob</a>
                    </td>
                    <td class="BodyD-Column1-Body1">The representation (mapping) in the Java™ programming language of an SQL <code>BLOB</code> value.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="CallableStatement/RDMCallableStatement.htm">RDMCallableStatement</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html" target="_blank">CallableStatement</a>
                    </td>
                    <td class="BodyD-Column1-Body1">The interface used to execute SQL stored procedures.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="Clob/RDMClob.htm">RDMClob</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/Clob.html" target="_blank">Clob</a>
                    </td>
                    <td class="BodyD-Column1-Body1">The mapping in the Java™ programming language for the SQL <code>CLOB</code>&#160;type.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="Connection/RDMConnection.htm">RDMConnection</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/Connection.html" target="_blank">Connection</a>
                    </td>
                    <td class="BodyD-Column1-Body1">A connection (session) with a specific database.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="DatabaseMetaData/RDMDatabaseMetaData.htm">RDMDatabaseMetaData</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html" target="_blank">DatabaseMetaData</a>
                    </td>
                    <td class="BodyD-Column1-Body1">Comprehensive information about the database as a whole.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="Driver/RDMDriver.htm">RDMDriver</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/Driver.html" target="_blank">Driver</a>
                    </td>
                    <td class="BodyD-Column1-Body1">The interface that every driver class must implement.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="Clob/RDMNClob.htm">RDMNClob</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/NClob.html" target="_blank">NClob</a>
                    </td>
                    <td class="BodyD-Column1-Body1">The mapping in the Java™ programming language for the SQL <code>NCLOB</code> type.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="ParameterMetaData/RDMParameterMetaData.htm">RDMParameterMetaData</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/ParameterMetaData.html" target="_blank">ParameterMetaData</a>
                    </td>
                    <td class="BodyD-Column1-Body1">An object that can be used to get information about the types and properties of the parameters in a <code>PreparedStatement</code> object.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="PreparedStatement/RDMPreparedStatement.htm">RDMPreparedStatement</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html" target="_blank">PreparedStatement</a>
                    </td>
                    <td class="BodyD-Column1-Body1">An object that represents a precompiled SQL statement.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="ResultSet/RDMResultSet.htm">RDMResultSet</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/ResultSet.html" target="_blank">ResultSet</a>
                    </td>
                    <td class="BodyD-Column1-Body1">A table of data representing a database result set, which is usually generated by executing a statement that queries the database.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="ResultSetMetaData/RDMEResultSetMetaData.htm">RDMResultSetMetaData</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html" target="_blank">ResultSetMetaData</a>
                    </td>
                    <td class="BodyD-Column1-Body1">An object that can be used to get information about the types and properties of the columns in a <code>ResultSet</code> object.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="Savepoint/RDMSavepoint.htm">RDMSavepoint</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/Savepoint.html" target="_blank">Savepoint</a>
                    </td>
                    <td class="BodyD-Column1-Body1">The representation of a savepoint, which is a point within the current transaction that can be referenced from the <code>Connection.rollback</code> method.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyB-Column1-Body1"><a href="Statement/RDMStatement.htm">RDMStatement</a>
                    </td>
                    <td class="BodyB-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html" target="_blank">Statement</a>
                    </td>
                    <td class="BodyA-Column1-Body1">The object used for executing a static SQL statement and returning the results it produces.</td>
                </tr>
            </tbody>
        </table>
        <p class="Heading">Unsupported Interfaces</p>
        <ul>
            <li value="1">Array</li>
            <li value="2">Ref</li>
            <li value="3">RowId</li>
            <li value="4">SQLData</li>
            <li value="5">SQLOutput</li>
            <li value="6">SQLXML</li>
            <li value="7">Struct</li>
        </ul>
        <h2>Package javax.sql</h2>
        <p class="Heading">Supported Interfaces</p>
        <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../Resources/TableStyles/BasicTwoCol.css');caption-side: top;" class="TableStyle-BasicTwoCol" cellspacing="0">
            <col class="Column-Column1" style="width: 180px;" />
            <col class="Column-Column2" style="width: 190px;" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <th class="HeadE-Column1-Header1">Interface Summary</th>
                    <th class="HeadE-Column2-Header1">&#160;</th>
                    <th class="HeadD-Column1-Header1">&#160;</th>
                </tr>
                <tr class="Head-Header1">
                    <th class="HeadE-Column1-Header1"><span class="MyVariablesShortCompanyName">Raima</span>&#160;Class</th>
                    <th class="HeadE-Column2-Header1">Implements</th>
                    <th class="HeadD-Column1-Header1">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="ConnectionPoolDataSource/RDMConnectionPoolDataSource.htm">RDMConnectionPoolDataSource</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/javax/sql/ConnectionPoolDataSource.html" target="_blank">ConnectionPoolDataSource</a>
                    </td>
                    <td class="BodyD-Column1-Body1">A factory for <code>PooledConnection</code> objects.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1"><a href="DataSource/RDMDataSource.htm">RDMDataSource</a>
                    </td>
                    <td class="BodyE-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/javax/sql/DataSource.html">DataSource</a>
                    </td>
                    <td class="BodyD-Column1-Body1">A factory for connections to the physical data source that this <code>DataSource</code> object represents.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyB-Column1-Body1"><a href="PooledConnection/RDMPooledConnection.htm">RDMPooledConnection</a>
                    </td>
                    <td class="BodyB-Column2-Body1"><a href="http://docs.oracle.com/javase/6/docs/api/javax/sql/PooledConnection.html" target="_blank">PooledConnection</a>
                    </td>
                    <td class="BodyA-Column1-Body1">An object that provides hooks for connection pool management.</td>
                </tr>
            </tbody>
        </table>
        <p class="Heading">Unsupported Interfaces</p>
        <ul>
            <li value="1">ConnectionEventListener</li>
            <li value="2">RowSet</li>
            <li value="3">RowSetInternal</li>
            <li value="4">RowSetListener</li>
            <li value="5">RowSetMetaData</li>
            <li value="6">RowSetReader</li>
            <li value="7">RowSetWriter</li>
            <li value="8">StatementEventListener</li>
            <li value="9">XAConnection</li>
            <li value="10">XADataSource</li>
        </ul>
        <h2><a name="Basic"></a>Basic JDBC Application Steps</h2>
        <p>There are several steps you need to take in order to create a Java program using the JDBC API. JDBC is the Java extension of the SQL API and will show some similarities in program layout (Such as creating a handle, preparing and then executing each statements. Although these are referenced as objects or classes in Java). Refer to the example <a href="#Hello">HelloWorldJDBC</a> for reference. Some code snippets will be provided.</p>
        <ol>
            <li value="1">Set up and initialize your application’s use of the JDBC SQL API as follows.<ol style="list-style-type: lower-alpha;"><li value="1">Using the <code>DriverManager</code> class, create your connection using the <span class="MyVariablesShortCompanyName">Raima</span> connection URL and the following <code>DriverManager</code> method:<br /><br /><code>Conn = DriverManager.getConnection("jdbc:raima:rdm://local");</code><br /><br />The string passed to the <code>getConnection()</code> method is a URL which designates which driver to use, how to get to the database, what database to connect to, and connection parameters.  See <code><a href="Driver/Method/connect.htm">RDMDriver.connect()</a></code> for more information.<br /><br />*Note for better de-allocation practices, create a new try block after each object has been allocated. See full code for clarification.</li><li value="2"><p>Create your <code>Statement</code> object by calling the following <code>Connection</code> method:</p><pre xml:space="preserve">Connection Conn = DriverManager.getConnection("jdbc:raima:rdm://local/&lt;databasename&gt;");
Statement Stmt = Conn.createStatement();</pre></li></ol></li>
            <li value="2">
                <p>Next create a <code>Statement</code>, <code>PreparedStatement</code>, or <code>CallableStatement</code>.  If you would like to use parameterized statements, use a <code>PreparedStatement</code>.  A <code>CallableStatement</code> adds the ability to use named parameters.</p>
                <ol style="list-style-type: lower-alpha;">
                    <li value="1">
                        <p>Create all needed <code>PreparedStatement</code> objects or a <code>CallableStatement</code> objects to prepare your application for execution by calling methods such as:</p><pre xml:space="preserve">PreparedStatement prepStmt = 
    Conn.prepareStatement("INSERT INTO hello_table (f00) VALUES (?)");</pre>
                        <p>or</p><pre xml:space="preserve">CallableStatement callStmt = 
    Conn.prepareCall("INSERT INTO hello_table (f00) VALUES ( :infoName )");</pre>
                    </li>
                    <li value="2">
                        <p>Call the setter methods to bind the parameters in your prepared statements, such as:</p><pre xml:space="preserve">prepStmt.setString(1, "Hello World!");</pre>
                        <p>or</p><pre xml:space="preserve">callStmt.setString("infoName", "Hello World!");</pre>
                    </li>
                </ol>
            </li>
            <li value="3">
                <p>Once you have all the required parameters supplied call <code>execute()</code> to execute you a prepared (or callable) statement.  If no parameters are needed a standard statement can be used.</p>
                <ol style="list-style-type: lower-alpha;">
                    <li value="1">
                        <p>Call <code>prepStmt.execute()</code> method to execute all of your prepared statements. You can also use your <code>Statement</code> object to execute statements with no preparation. This was used above when you opened the database.</p><pre xml:space="preserve">ResultSet rs = Stmt.execute("SELECT * FROM hello_table");</pre>
                        <p>or</p><pre xml:space="preserve">ResultSet rs = prepStmt.execute();</pre>
                        <p>or</p><pre xml:space="preserve">ResultSet rs = callStmt.execute();</pre>
                    </li>
                    <li value="2">
                        <p>Create a while loop checking for the next value in your result set to be null or your <code>ResultSet.next()</code> method returns false meaning no more data. This will traverse through your table after a <b>select</b> statement has been performed and stored into a <code>ResultSet</code>. Inside of your loop call a getter method such as <code>ResultSet.getString(1)</code> to receive the data from your table in the current row.</p><pre xml:space="preserve">while (rs.next())
{
    String name = rs.getString(1); // retrieve the first column as a string.
    ...
}
</pre>
                    </li>
                </ol>
            </li>
            <li value="4">When your application is ready to terminate there are several steps you must take to insure nothing is left behind.<ol style="list-style-type: lower-alpha;"><li value="1"><div><p>For every nested try block, you must have a finally block that closes the corresponding Object by performing the Class.close() method. For example :</p><pre xml:space="preserve">...<br />} finally {<br />    rs.close();<br />}</pre><p>See complete code below for a more complete example</p></div></li><li value="2"><div><p>The last try block must include a catch block to handle the <code>SQLExceptions</code> that could be thrown. For example:</p><pre xml:space="preserve">...
} catch (SQLException exception) {
    System.err.println("SQLException : "
        + exception.toString()); // Displays error to standard out
}
</pre></div></li></ol></li>
        </ol>
        <h2><a name="Hello"></a>Hello World!</h2>
        <p>If the steps above are followed you should be able to access a simple database, store in some data and read the data back out. You can see an example of this in the common "Hello World!" example given below.</p><pre xml:space="preserve">import java.sql.*;
/**
* HelloWorld_JDBCTutorial_Main : JDBC Tutorial that creates a simple database, stores in a 
* single row and retrieves the data to then be displayed on standard out. The database is 
* cleaned up to reduce clutter for this example. Also note that the main throws a SQLException. 
* Normally this code would be declared in a separate method which can throw an exception or 
* contain another try catch block, and then be caught in a try catch block where used, but for 
* example sake we throw it from the main.
**/
public class HelloWorld_JDBCTutorial_main {

    public static void main(String[] args) throws SQLException{

        Connection Conn = DriverManager.getConnection("jdbc:raima:rdm://local");
        try {
           
            Statement Stmt =  Conn.createStatement();
            try {
                try { //Since the database is created here, it cannot be created twice
                    Stmt.execute("DROP DATABASE hello_db");
                } catch (SQLException exception) {} 
                
                Stmt.execute("CREATE DATABASE hello_Db");
                Stmt.execute("CREATE TABLE hello_table (f00 char(31))");
                Conn.commit();
                
                PreparedStatement PrepStmt = 
                    Conn.prepareStatement("INSERT INTO hello_table (f00) VALUES (?)");
                try { //Sets parameter value to a string         
                    PrepStmt.setString(1, "Hello World!");
                    PrepStmt.execute();
                    Conn.commit();

                    ResultSet RS = Stmt.executeQuery("SELECT * FROM hello_table");
                    try {
                        while(RS.next() != false) {
                            System.out.println(RS.getString(1));
                        }
                    } finally {
                        RS.close();
                    }
                } finally { //Cleans up by dropping database in this case
                    Stmt.execute("DROP DATABASE hello_db");
                    PrepStmt.close();
                }
            } finally {
                Stmt.close();
            }
            
        } catch (SQLException exception) {
            System.err.println("SQLException: " + exception.toString());

        }finally {
             Conn.close();           
        }
    }
}
</pre>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright © 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#JAVARM/JDBC.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>