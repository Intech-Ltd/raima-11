<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="Native API|Reference Manual|Platform Support Functions (psp_ Prefix)" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>psp_syncWait</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/TableStyles/FunctionArgs.css" rel="stylesheet" />
        <link href="../Resources/TableStyles/CoreErrCodes.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#PSPRM/psp_syncWait.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbCore.htm">Native API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../RM/dbRM.htm">Reference Manual</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../RM/Chapter5.htm">Platform Support Functions (psp_ Prefix)</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">psp_syncWait</span>
        </div>
        <h3 class="newpage"><a name="kanchor194"></a>psp_syncWait</h3>
        <p>Wait
for an event semaphore to be resumed&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
        <p class="Heading"> Prototype</p><pre class="BodyIndent4" xml:space="preserve">int32_t&#160;psp_syncWait (
&#160;&#160;&#160;&#160;PSP_SEM&#160; handle,
&#160;&#160;&#160;&#160;int32_t &#160;timeout)</pre>
        <p class="Heading">Parameter</p>
        <table style="width: 100%;mc-table-style: url('../Resources/TableStyles/FunctionArgs.css');margin-left: 0;margin-right: auto;" class="TableStyle-FunctionArgs" cellspacing="0">
            <col style="width: 140px;" class="Column-Column1" />
            <col style="width: 80px;" class="Column-Column3" />
            <col class="Column-Column2" />
            <tbody>
                <tr class="Body-Body1">
                    <td style="" class="BodyE-Column1-Body1">handle</td>
                    <td style="" class="BodyE-Column3-Body1">(input)</td>
                    <td style="" class="BodyD-Column2-Body1">The handle to an
event semaphore.</td>
                </tr>
                <tr class="Body-Body1">
                    <td style="" class="BodyB-Column1-Body1">timeout</td>
                    <td style="" class="BodyB-Column3-Body1">(input)</td>
                    <td style="" class="BodyA-Column2-Body1">The maximum wait time, in
milliseconds.&#160; To have an unlimited wait time, specify PSP_INDEFINITE_WAIT.</td>
                </tr>
            </tbody>
        </table>
        <p class="Heading">Description</p>
        <p>This
function waits for the event semaphore to be signaled.&#160; If the semaphore is
already in a signaled state, the function returns immediately.&#160; Calling <code>psp_syncResume</code>&#160; signals the semaphore.</p>
        <p>If the
semaphore is not signaled, the calling thread will wait, pausing up to the
amount of time specified in the <code>psp_syncWait</code> call.&#160; (If
PSP_INDEFINITE_WAIT is specified, the thread will wait indefinitely.)&#160; If a
timeout occurs, the function returns PSP_TIMEOUT.</p>
        <p class="Notes">Note:&#160;The initial state for an event semaphore is signaled.&#160;</p>
        <p class="Heading">Return Codes</p>
        <table class="TableStyle-CoreErrCodes" cellspacing="0" style="mc-table-style: url('../Resources/TableStyles/CoreErrCodes.css');margin-left: 0;margin-right: auto;">
            <col class="Column-Column1" />
            <col class="Column-Column2" />
            <col class="Column-Column3" />
            <thead>
                <tr class="Head-Header1">
                    <th class="HeadE-Column1-Header1">Value</th>
                    <th class="HeadE-Column2-Header1">Name</th>
                    <th class="HeadD-Column3-Header1">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="BodyB-Column1-Body1">0</td>
                    <td class="BodyB-Column2-Body1">PSP_OKAY</td>
                    <td class="BodyA-Column3-Body1">A normal return; successful.</td>
                </tr>
            </tbody>
        </table>
        <table class="TableStyle-CoreErrCodes" cellspacing="0" style="mc-table-style: url('../Resources/TableStyles/CoreErrCodes.css');">
            <col class="Column-Column1" />
            <col class="Column-Column2" />
            <col class="Column-Column3" />
            <tr class="Body-Body1">
                <td class="BodyE-Column1-Body1">1</td>
                <td class="BodyE-Column2-Body1">PSP_TIMEOUT</td>
                <td class="BodyD-Column3-Body1">The event has not been signaled before the time of the timeout value has passed.</td>
            </tr>
        </table>
        <p class="Heading">See Also</p>
        <p><a href="psp_syncResume.htm">psp_syncResume</a>
        </p>
        <p><a href="psp_syncStart.htm">psp_syncStart</a>
        </p>
        <p class="Heading">Example</p><pre class="Example" xml:space="preserve">#include "psp.h"

void myThread(void *arg)
{
    PSP_SEM     sem = *(PSP_SEM *)arg;
    
    printf("initializing thread\n");
    psp_sleep(1000); /* simulate initialization */
    
    /* initialization is done, main thread can continue */
    psp_syncResume(sem);
    psp_sleep(1000);
}

main(int argc, char *argv[])
{
    PSP_SEM      sem;
    
    sem = psp_syncCreate(PSP_EVENT_SEM);
    if (sem)
    {
        psp_syncStart(sem);
        psp_threadBegin(myThread, 0, (void *)&amp;sem);
        printf("waiting for thread to initialize\n");
        psp_syncWait(sem, PSP_INDEFINITE_WAIT);
        printf("thread initialized\n");
        psp_sleep(2000);
    }
}
</pre>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright Â© 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#PSPRM/psp_syncWait.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>