<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="SQL API|SQL Language Guide|User's Guide" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Introduction</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#SQL/Chapter1.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbRSQL.htm">SQL API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="dbSQL.htm">SQL Language Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="#">User's Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Introduction</span>
        </div>
        <h1><a MadCap:generatedBookmark="TOC" name="Introduction_..10"></a>Introduction</h1>
        <p class="Quotation">"The days just prior to marriage are like</p>
        <p class="Quotation">a snappy introduction to a tedious book."</p>
        <p class="QuoteAuthor">- Wilson Mizner,</p>
        <p class="QuoteAuthor">US Screenwriter (1876-1933)</p>
        <p>According to Wikipedia's entry entitled "Elephant Joke", there's an old one that goes like this:</p>
        <p>Q. How many elephants will fit into a Mini?</p>
        <p>A. Four: two in the front, two in the back.</p>
        <p>Q. How many giraffes will fit into a Mini?</p>
        <p>A. None. It's full of elephants.</p>
        <p>Of course, if it is possible to get four elephants into a Mini then it must be pretty easy to get one in.  In which case, there must also be no problem using SQL in an embedded computer application!  But, even if one does succeed in getting the elephant into the car, the added weight will certainly have a significant negative impact on its speed.  Such is the case on the advisability of using SQL in an embedded database application. The 2008 edition of Volume 2 of the ANSI/ISO SQL standard is over 1300 pages long.  That's about twice the size of the 1992 standard which itself was considerably larger than the original 1989 standard.  A fully-compliant implementation of SQL (which may not actually exist) is indeed a monster.  For any SQL database management system (DBMS) implementer, just the effort involved to understand the standard in order to construct a commercially-viable, fully-compliant implementation is immense.</p>
        <p>Nevertheless, SQL has become the industry standard database access language.  As such, there are many software developers who know how to use SQL.  Because of this vast availability of SQL database skills, many companies that are involved in the development of embedded computer applications with database management requirements would like to be able to use SQL to access and manipulate that database information.</p>
        <p>The DBMS capabilities that are needed in embedded computing applications are not nearly as broad as those needed in enterprise systems.  <span class="MyVariablesProductShortName">RDM</span> SQL has been designed specifically for embedded systems applications.  As such, it provides a subset of the ANSI/ISO standard SQL that is suitable for running on a wide variety of computers and embedded operating systems many of which have limited computing resources.   Some non-standard features are also included that are designed specifically for the needs of embedded computing applications.</p>
        <p><span class="MyVariablesRSQLName">RDM SQL</span> is built on top of the <span class="MyVariablesProductShortName">RDM</span> database system and thus provides all of its replication and mirroring capabilities.  However, it is important to note that <span class="MyVariablesRSQLName">RDM SQL</span> is not designed to provide an SQL interface to existing <span class="MyVariablesProductShortName">RDM</span> applications but to be the primary database access interface for the application.   Of course, the ability to use the core-level <span class="MyVariablesProductShortName">RDM</span> API is available to the <span class="MyVariablesRSQLName">RDM SQL</span> user but the need to utilize the lower-level record-oriented API would be the exception and not the rule.   On a practical level what this means is that the application database can only be defined through the <span class="MyVariablesRSQLName">RDM SQL</span> DDL which does not expose all of the DDL capabilities available in the non-SQL <span class="MyVariablesProductShortName">RDM</span> DDL.</p>
        <p>Features of SQL that are not all that useful in embedded applications and, when implemented, can consume a significant amount of computing resources have not been implemented in <span class="MyVariablesRSQLName">RDM SQL</span>.  Those features include: database views (<b>create view</b>) and security (<b>grant</b> and <b>revoke</b>), <b>check</b> clause integrity constraints, triggers (<b>create trigger</b>), and dynamic DDL (<b>alter table</b>).</p>
        <p>Non-standard features that have been added based on embedded application requirements include the ability to:</p>
        <ul>
            <li value="1">include compiled C modules containing statically initialized database catalog tables and SQL stored procedures,</li>
            <li value="2">include compiled C modules containing statically initialized, pre-compiled SQL stored procedure definitions,</li>
            <li value="3">define user-defined SQL functions in C,</li>
            <li value="4">define <i>virtual tables</i> that allow any kind of data source (e.g., real-time sensor network data) to be accessed through SQL,</li>
            <li value="5">limit the number of returned rows from a <b>select</b> statement by number or time,</li>
            <li value="6">produce a target SQL application that does not need to perform any dynamic compilation of SQL statements.</li>
        </ul>
        <p>This manual uses standard database and SQL terminology such as DDL (database definition language), DML (database manipulation language), etc.  If there is a term that you do not understand simply refer to the glossary toward the end of the manual for a definition.</p>
        <h2><a MadCap:generatedBookmark="TOC" name="Operational_Overview"></a>Operational Overview</h2>
        <p><span class="MyVariablesRSQLName">RDM SQL</span> is designed to be used in a C language application program and execute on virtually any operating system and hardware platform.  While many platforms are supported, a given database application must only use platforms that are architecturally identical (e.g., same endianess).</p>
        <p>Input and output to an <span class="MyVariablesProductShortName">RDM</span> database is managed by an <span class="MyVariablesProductShortName">RDM</span> Transactional File Server (TFS).  The <span class="MyVariablesRSQLName">RDM SQL</span> application makes calls to the <span class="MyVariablesRSQLName">RDM SQL</span> application program interface (API) functions which can compile and/or execute SQL statements embedded in the application program.  Figure 1</p>
        <p>Figure 1 shows a typical <span class="MyVariablesRSQLName">RDM SQL</span> application that includes the ability to dynamically compile and execute SQL statements.</p>
        <p class="Caption" style="text-align: left;">
            <img src="../Resources/Images/intro-fig1_443x391.jpg" style="width: 443;height: 391;" />
            <br />Figure 1 - Dynamic <span class="MyVariablesRSQLName">RDM SQL</span> Application</p>
        <p>Embedded applications, however, typically have well-defined data access and manipulation requirements and so they usually do not need to have the ability to support ad hoc query processing.  As much as 25-30% of an SQL implementation goes to the support of dynamic compilation.  Thus, if this can be eliminated from the embedded application code, a not insignificant amount of memory can be saved.</p>
        <p>In order to do this, <span class="MyVariablesRSQLName">RDM SQL</span> provides the ability to define a basic stored procedure that can contain either one or more select statements or one or more insert, update, or delete statements.  These statements are compiled on a host development computer system.  The compiled form of the stored procedure is stored in both a C file and a binary file. The C file can be compiled and linked in with the application and the procedures executed through a specific <span class="MyVariablesRSQLName">RDM SQL</span> API function call (<code>rsqlExecProc</code>).  When all of the SQL statements used by an application are encapsulated this way in pre-compiled stored procedures then the compilation component of <span class="MyVariablesRSQLName">RDM SQL</span> is no longer needed and can be omitted from the application.  Figure 2 depicts this situation.</p>
        <p>Notice that an <span class="MyVariablesProductShortName">RDM</span> application program can access databases from any number of TFSs and that those TFSs can be running on any computer that is accessible to the application's computer through TCP/IP.  A feature of <span class="MyVariablesRSQLName">RDM SQL</span> is the ability to open multiple instances of the same database running on separate TFSs as a single database that is a union of the separate instances.  This allows the database to be separated into independent partitions on which queries can be performed across all partitions.  The <a href="Chapter9.htm">Concurrent Database Access</a> section will describe this feature in more detail.</p>
        <p class="Caption" style="text-align: left;">
            <img src="../Resources/Images/intro-fig2_520x400.jpg" style="width: 520;height: 400;" />
            <br />Figure 2 - Static <span class="MyVariablesRSQLName">RDM SQL</span> Application</p>
        <p>Provided with <span class="MyVariablesRSQLName">RDM SQL</span> is a command-line tool called <code><span class="MyVariablesUrdmsql">rdmsql</span></code> (described in detail in the <a href="Chapter3.htm">Interactive SQL Scripting Utility</a> section) which can be used to dynamically execute user-specified SQL statements and text files containing SQL statements.  A typical use of <code><span class="MyVariablesUrdmsql">rdmsql</span></code> is to process a file containing the SQL DDL statements that define a database.  This process is shown in Figure 3.</p>
        <p class="Caption" style="text-align: left;">
            <img src="../Resources/Images/intro-fig3_370x385.jpg" style="width: 370;height: 385;" />
            <br />Figure 3 - How <span class="MyVariablesRSQLName">RDM SQL</span> Processes a DDL File</p>
        <p>Embedded development often involves doing development on a host system and deploying the application on a target system.   Catalogs and stored procedures that are created on the host platform can only be used on a target platform that is architecturally identical to the host.  However, if the catalogs and stored procedures were created by an <span class="MyVariablesRSQLName">RDM SQL</span> running under a target simulator on the host system, then they will be output in a target-compatible format.</p>
        <p>Besides the native <span class="MyVariablesRSQLName">RDM SQL</span> API, standard ODBC and JDBC interfaces are also provided.  Two forms of each are available.  A client-server version allows an ODBC or JDBC application to interact with an <span class="MyVariablesRSQLName">RDM SQL</span> database engine running as a server on a separate computer.  This allows, for example, third-party ODBC-based tools to access an <span class="MyVariablesRSQLName">RDM SQL</span> database without having to execute on the same computer.  A situation which may not even be possible on some embedded systems.  Alternatively, if you prefer to program using a standard SQL interface, you can link your target computer C/C++ (or Java) application directly with our ODBC (or JDBC) library.</p>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright © 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#SQL/Chapter1.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>