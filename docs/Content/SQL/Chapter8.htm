<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="SQL API|SQL Language Guide|User's Guide" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Writing and Using Stored Procedures</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#SQL/Chapter8.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbRSQL.htm">SQL API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="dbSQL.htm">SQL Language Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="Chapter1.htm">User's Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Writing and Using Stored Procedures</span>
        </div>
        <h1><a MadCap:generatedBookmark="TOC" name="Writing_and_Using_Stored_Procedures"></a>Writing and Using Stored Procedures</h1>
        <p class="Quotation">There is no procedure for learning to write.</p>
        <p class="Quotation">What you must do, is learn to think.</p>
        <p class="QuoteAuthor">- S. Leonard Rubenstein, Pennsylvania State University</p>
        <p class="QuoteAuthor">classroom lecture, 1980.</p>
        <p>A stored procedure is a named and possibly parameterized collection of one or more SQL statements that are precompiled and executed together as a group.  In <span class="MyVariablesRSQLName">RDM SQL</span>, stored procedures are defined using the create procedure statement as shown in the syntax specification given below.</p><pre class="Grammar">create_proc_stmt:
		<b>create</b> {<b>proc</b> | <b>procedure</b>} <i>proc_name</i> [(<i>arg_name</i> arg_type[, <i>arg_name</i> arg_type]...)] <b>as</b>
 			{select_stmt... | 
 			[start_stmt] {insert_stmt | update_stmt | delete_stmt}... [commit_stmt]}
		<b>end</b> {<b>proc</b> | <b>procedure</b>}</pre><pre class="Grammar" xml:space="preserve">
arg_type:
     		{<b>character</b> | <b>char</b> }
 	|	{<b>double</b> [<b>precision</b>] | <b>float</b> | <b>real</b> }
 	|	{<b>tinyint</b> |&#160;<b>smallint</b> | <b>int</b> | <b>integer</b>   <![CDATA[ ]]><b>long</b> | <b>bigint</b>}
 	|	<b>date</b> | <b>time</b> | <b>timestamp</b>   <![CDATA[
]]></pre>
        <p>You will notice that you can either include one or more <b>select</b> statements or you can only include one or more database modification statements optionally as a transaction.  Stored procedures, therefore, can be used to specify the precompiled queries and the precompiled database modifications needed by an application.   However, <span class="MyVariablesRSQLName">RDM SQL</span> stored procedures do not allow you to specify a single procedure that does both.   The limitations are designed to keep the <span class="MyVariablesRSQLName">RDM SQL</span> implementation as efficient and as small as possible because of the resource limitations of many embedded computing environments.</p>
        <p>The names used for stored procedure arguments must not conflict with column names that are declared in any of the tables that are referenced in the SQL statements contained in the stored procedure.  The argument data types must be compatible with how they are used in the SQL statements specified in the procedure.</p>
        <p>When a stored procedure has been successfully compiled by <span class="MyVariablesRSQLName">RDM SQL</span>, the compiled code is stored in a file named <i>proc_name</i>.ssp on the database's TFS.    Also created and stored in the current directory is a file named <i>proc_name</i>_ssp.c containing statically initialized C data structures that contain the compiled stored procedure information and a file named <i>proc_name</i>_ssp.h which is a C header file to be included in any program that will directly execute the stored procedure by calling function <code>rsqlExecProc</code>.   This process is illustrated in Figure 8.</p>
        <p class="Caption" style="text-align: left;">
            <img src="../Resources/Images/proc-fig8_462x418.jpg" style="width: 462;height: 418;" />
            <br />Figure 8 - How Create Procedure is Processed</p>
        <p>There are two ways to execute a stored procedure. If all of your SQL database access is through pre-compiled stored procedures (i.e., use of the <code>proc_name_ssp.c</code> module), then as mentioned above, the application, calls <code>rsqlExecProc</code>.  This will be explained in detail in the <a href="Chapter11.htm">Using SQL in an Application Program</a> section.  The other way to execute a stored procedure is by compiling and executing an <b>execute</b> statement as shown in the following syntax.</p><pre class="Grammar" xml:space="preserve">execute_stmt:
		[<b>exec</b>[<b>ute</b>] |&#160;<b>run</b>] <i>proc_name</i> [<b>(</b><i>constant</i>[, <i>constant</i>]...<b>)</b>]</pre>
        <p>The next example creates and executes a stored procedure that will retrieve some of the columns in the book table for a specific <code>bookid</code> value that is passed in as an argument.</p><pre xml:space="preserve">create proc getbook(bid char) as
    select last_name, publ_year, price, title from book
        where bookid = bid
end proc;
execute getbook("austen03");

LAST_NAME     PUBL_YEAR        PRICE TITLE
AustenJ            1814     13500.00 Mansfield Park: a novel. In three volumes.</pre>
        <p>Now suppose we really want to see the author's full name along with the selected book information.  You can do this by including two <b>select</b> statements: one that returns the <code>full_name</code> column from the author row that's joined with the book and another that returns the book data.  Note also that the <b>execute</b> key word is optional.</p><pre xml:space="preserve">create proc getbook(bid char) as
 	select full_name from author natural join book where bookid = bid
 	select publ_year, price, title from book where bookid = bid
end proc;

getbook("austen03");

FULL_NAME
Austen, Jane

PUBL_YEAR          PRICE TITLE
     1814       13500.00 Mansfield Park: a novel. In three volumes.</pre>
        <p>The next example shows how to modify the database contents using a stored procedure. The <code>newpatron</code> procedure inserts a new row into the patron table.</p><pre xml:space="preserve">create procedure newpatron(
pid char, nm char, cty char, str char, st char, 
cntry char, zip char, em char, tel char, mid char) as
    insert into patron values pid, nm, str, cty, st, cntry, zip, em, tel, mid
end proc;
newpatron("RLM", "Randy Merilatt", "720 3rd Ave Suite 1100", "Seattle", "WA", 
 	"US", "98104", "merilatt@raima.com","206-748-5200","BARNEY");
select name, city, state, mgrid, email from patron where patid = "RLM";

NAME                CITY         STATE MGRID   EMAIL
Randy Merilatt      Seattle      WA    BARNEY  merilatt@raima.com</pre>
        <p>The above version of <code>newpatron</code> does encapsulate the <b>insert</b> inside a transaction.  So in order to make the new patron permanent, a <b>commit</b> needs to be separately executed.   Normally, you would not use a transaction inside a stored procedure when there is more than one modification stored procedure that you want to have as part of a single transaction.  The version of <code>newpatron</code> that uses a transaction is defined below.</p><pre xml:space="preserve">create procedure newpatron(
pid char, nm char, cty char, str char, st char, 
cntry char, zip char, em char, tel char, mid char) as
 	start transaction
 	insert into patron values pid, nm, str, cty, st, cntry, zip, em, tel, mid
 	commit
end proc;</pre>
        <p>A modification stored procedure can contain more than one statement.  The next example records a book sale.</p><pre xml:space="preserve">create procedure sold(b_id char, p_id char, amt double) as
    start transaction
    insert into sale values b_id, p_id
    update book set price = amt, date_sold = curdate() where bookid = b_id
    commit
end proc;</pre>
        <p>To record the sale of Jane Austen's <i>Emma</i> to Lucille Bluth for Â£12,500 enter the following.</p><pre xml:space="preserve">select last_name, price, date_sold, title from book where bookid = "austen04";

LAST_NAME               PRICE DATE_SOLD  TITLE
AustenJ                 13500 *NULL*     Emma: a novel. In three volumes.
exec sold("austen04","BLU", 12500.00);

*** 1 rows affected

*** 1 rows affected

select last_name, price, date_sold, title from book where bookid = "austen04";

LAST_NAME               PRICE DATE_SOLD  TITLE
AustenJ                 12500 2010-11-18 Emma: a novel. In three volumes.</pre>
        <p>If an error occurs during the execution of any of the SQL statements in a stored procedure, any changed made by that statement are aborted and the stored procedure will immediately exist leaving any remaining statements unexecuted.  If the stored procedure is a modification procedure any changes made by the stored procedure prior to the attempted execution of the offending statement are automatically rolled back.  If no transaction was specified in the stored procedure, any changes made during the active transaction but prior to the execution of the stored procedure remain intact and can either be committed or rolled back as desired.</p>
        <p>In <span class="MyVariablesRSQLName">RDM SQL</span>, stored procedures are not intended to be an alternative way to program.  They simply provide the ability to pre-compile the SQL statements that are needed to access and manipulate the database so that an application does not incur the cost of either having to compile the statements dynamically at runtime.</p>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright Â© 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#SQL/Chapter8.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>