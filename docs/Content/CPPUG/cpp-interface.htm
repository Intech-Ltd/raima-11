<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="C++ API" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating the C++ Interface</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/TableStyles/ArgsTwoCol.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#CPPUG/cpp-interface.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="dbCPP.htm">C++ API</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Creating the C++ Interface</span>
        </div>
        <h1><a MadCap:generatedBookmark="TOC" name="Creating_the_C++_Interface"></a>Creating the C++ Interface</h1>
        <p>The C++ API is tailored to a specific schema and is optionally generated by the Data Definition Language Process (ddlp) utility when it processes a database schema definition file.  As an example we will create a schema to support a hypothetical piece of equipment that stores readings from onboard sensors. Information on how to design a <span class="MyVariablesProductShortName">RDM</span> schema can be found in <a href="../UG/Chapter4.htm#4.2">section 4.2</a> of the <span class="MyVariablesProductShortName">RDM</span> User's Guide.</p><pre xml:space="preserve">database measurements 
{
  data file "measurements.d00" contains sensor;
  data file "measurements.d01" contains measurement;
  key file  "measurements.k00" contains sensor.name;
  blob file "measurements.b00" contains measurement.raw_data;
  
  record sensor {
    unique key char name[32];
    int32_t status;
  }
  
  record measurement {
    int32_t time;
    int32_t value;
    blob_id raw_data;
  }
  
  set sensor_measurement {
    order last;
    owner sensor;
    member measurement;
  }
}
</pre>
        <p>We run the <code>DDLP</code> utility with the <code>–cpp</code> option to get a C++ API for the above schema.</p><pre xml:space="preserve">ddlp –d –cpp measurement.ddl</pre>
        <p>This command will produce the source and header that comprise the <span class="MyVariablesProductShortName">RDM</span> C++ API for the measurements database</p>
        <table style="width: 100%;mc-table-style: url('../Resources/TableStyles/ArgsTwoCol.css');" class="TableStyle-ArgsTwoCol" cellspacing="0">
            <col class="Column-Column1" style="width: 200px;" />
            <col class="Column-Column2" />
            <tbody>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1">measurements.h</td>
                    <td class="BodyD-Column2-Body1"><span class="MyVariablesProductShortName">RDM</span> database header file</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1">measurements_api.h</td>
                    <td class="BodyD-Column2-Body1"><span class="MyVariablesProductShortName">RDM</span> C++ interface header file</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyB-Column1-Body1">meansurements_api.cpp</td>
                    <td class="BodyA-Column2-Body1"><span class="MyVariablesProductShortName">RDM</span> C++ interface implementation file</td>
                </tr>
            </tbody>
        </table>
        <p>All source files that want to use the <span class="MyVariablesProductShortName">RDM</span> C++ API for the measurements database will need to include the <code>measurements_api.h</code> header file.  The <code>measurements_api.cpp</code> source file will need to be compiled with the application code.</p>
        <h2><a MadCap:generatedBookmark="TOC" name="Access_Methods"></a>Access Methods</h2>
        <p>Cursors are used to navigate, read, update, create, and delete records within the C++ API.  There are four main types of Cursors available each of which implements a different access method to data stored in a <span class="MyVariablesProductShortName">RDM</span> database.  While there are four types of Cursor each cursor implementation uses the exact same interface which simplifies the uses of these cursors.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Singleton_Cursors_..12"></a>Singleton Cursors</h3>
        <p>Singleton Cursors contain one and only one record instance.  Singleton Cursors can be obtained by</p>
        <ul>
            <li value="1">Creating a new record (<code>Db.New_<i>recordname</i></code>)</li>
            <li value="2">Asking for the owner of a set (<code>Cursor.Get_<i>setname</i>_owner</code>)</li>
            <li value="3">Asking for a Singleton cursor from any cursor (<code>Cursor.GetThis</code>)</li>
        </ul>
        <p>Singleton cursors can be useful if we want to save a reference to a particular record or if we wish to do multiple things to with the record and an operation may remove the record from the cursor.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Table_Scan_Cursors_..13"></a>Table Scan Cursors</h3>
        <p>Table scan cursors contain a collection of all the records in a table in no particular order.  Table Scan Cursors are useful when you want to access all records in a table and the order of access is not important.  For example if you wanted to calculate the total number of measurements taken by all sensors in our example database.  Table Scan Cursors can be obtained from the Db Interface by the <code>Db-&gt;Get_<i>recordname</i>_records</code> method and from a Cursor interface by using the <code>Cursor-&gt;GetRecords</code> method. Obtaining a Cursor from the Db interface positions the cursor at the first cursor position.  Obtaining a Cursor from another Cursor positions the new cursor at the same Cursor position.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Key_Scan_Cursors_..14"></a>Key Scan Cursors</h3>
        <p>Key scan cursors contain a collection of all records in a table in index order.  Key Scan Cursor can be useful when you want to display records to a user in a particular order.  Key Scan Cursors can be obtained from the Db Interface by the <code>Db.Get_<i>recordname</i>_recordsBy_<i>indexname</i></code> method or from a Cursor interface by the <code>Cursor.GetRecordsBy_<i>indexname</i></code> method. Obtaining a Cursor from the Db interface positions the cursor at the first cursor position.  Obtaining a Cursor from another Cursor positions the new cursor at the same Cursor position.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Set_Member_Cursor"></a>Set Member Cursor</h3>
        <p>A Set Member Cursor contains a collection of records associated with a particular owner record.  Set Member Cursors can be used to iterate through all of the measurements made by a particular sensor in our example database.  Set Member Cursors can only be obtained from a Cursor by the <code>Cursor.Get_<i>setname</i>_members</code> and <code>Cursor.Get_<i>setname</i>_siblings</code> methods.</p>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright © 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#CPPUG/cpp-interface.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>