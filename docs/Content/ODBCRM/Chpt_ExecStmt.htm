<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="SQL API|ODBC User's Guide" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Executing an SQL Statement</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#ODBCRM/Chpt_ExecStmt.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbRSQL.htm">SQL API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="dbODBCUG.htm">ODBC User's Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Executing an SQL Statement</span>
        </div>
        <h2 class="newpage"><a MadCap:generatedBookmark="TOC" name="Executing_an_SQL_Statement"></a>Executing an SQL Statement</h2>
        <p>Once a connection to a data source has been established, an application can execute SQL statements to interact with the databases managed by the data source. Executing an SQL statement involves the following steps.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Allocating_a_Statement_Handle"></a>Allocating a Statement Handle</h3>
        <p>Before executing an SQL statement, an application needs to allocate a statement handle by calling <code>SQLAllocHandle</code>, passing <code>SQL_HANDLE_STMT</code> to the first argument and an existing connection handle to the second. A connection to a data source must already be established on the connection handle in order to allocate a statement handle on it.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Preparing_an_SQL_Statement"></a>Preparing an SQL Statement</h3>
        <p>An application can "prepare" an SQL statement before actually executing it. Preparing an SQL statement means the <span class="MyVariablesProductShortName">RDM</span> ODBC Driver (and its underlying <span class="MyVariablesRSQLName">RDM SQL</span> engine) parses the statement and stores the information necessary to execute it later. This process can also detect any errors that are in the statement, such as syntax errors and references to tables/columns that do not exist. An application can prepare a statement by calling <code>SQLPrepare</code>.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Executing_an_SQL_Statement_..5"></a>Executing an SQL Statement</h3>
        <p>Once an SQL statement has been prepared, an application can call <code>SQLExecute</code> to perform the actual execution of the statement.</p>
        <p>A prepared statement can be executed multiple times without being prepared again. This is useful when executing a statement with dynamic parameter binding. For details about dynamic parameter binding, see the Working with Parameters section.</p>
        <p>If an application needs to execute the same SQL statement only once, the preparation and execution steps can be combined into a single call to <code>SQLExecDirect</code>. <code>SQLExecDirect</code> prepares and executes the specified SQL statement at once.</p>
        <p>The following example illustrates how an application can allocate a statement handle and execute a statement that opens the NSFAWARDS database.</p>
        <p class="Caption">Example 5 Opening a database</p><pre xml:space="preserve">#include "sqlrdm.h"
	
SQLRETURN runDbOperations(
    SQLHDBC hDbc)
{
    SQLRETURN rc;
    SQLHSTMT  hStmt;

    /* Allocate a statement handle */
    rc = SQLAllocHandle(SQL_HANDLE_STMT, hDbc, &amp;hStmt);
    if (SQL_SUCCEEDED(rc)) {
        rc = SQLExecDirect(hStmt, (SQLCHAR *) "OPEN nsfawards",
                SQL_NTS);

        (void) SQLFreeHandle(SQL_HANDLE_STMT, hStmt);
    }

    return rc;
}
</pre>
        <h3><a MadCap:generatedBookmark="TOC" name="Committing_or_Rolling_Back_Transactions"></a>Committing or Rolling Back Transactions</h3>
        <p>Statements, such as <b>INSERT</b>, <b>UPDATE</b> and <b>DELETE</b> may make changes to the data stored in the data source. Those statements are called "data manipulation language (DML) statements." When executing a DML statement, <span class="MyVariablesProductShortName">RDM</span> ODBC automatically starts a transaction so that the changes can be committed (i.e. saved) or rolled back (i.e. aborted). Microsoft ODBC specification says transactions are committed automatically with each DML statement by default (called "autocommit"). For <span class="MyVariablesProductShortName">RDM</span> ODBC, the "autocommit" feature is turned off by default, so an application must manually commit or roll back a transaction by calling <code>SQLEndTran</code>. The autocommit feature can be turned on by setting the <code>SQL_ATTR_AUTOCOMMIT</code> connection attribute to <code>SQL_AUTOCOMMIT_ON</code>.</p>
        <p>The following examples illustrate how an <b>INSERT</b> statement can be executed including transaction processing. It attempts to insert a new row into the PERSON table of the NSFAWARDS database.</p>
        <p class="Caption">Example 6 Inserting a new row</p><pre xml:space="preserve">#include "sqlrdm.h"

SQLRETURN runDbOperations(
    SQLHDBC hDbc)
{
    SQLRETURN   rc;
    SQLHSTMT    hStmt;
    const char *pszStmt = "INSERT INTO person VALUES "
                          "'Houglum, Bill', 'M', '1'";

    /* Allocate a statement handle */
    rc = SQLAllocHandle(SQL_HANDLE_STMT, hDbc, &amp;hStmt);
    if (SQL_SUCCEEDED(rc)) {
        rc = SQLExecDirect(hStmt, (SQLCHAR *) "OPEN nsfawards",
                SQL_NTS);
        if (SQL_SUCCEEDED(rc)) {
            /* Execute an INSERT statement */
            rc = SQLExecDirect(hStmt,
                (SQLCHAR *) pszStmt, SQL_NTS);
 
             if (SQL_SUCCEEDED(rc)) {
                 /* INSERT successful; commit the change */
                 (void) SQLEndTran(SQL_HANDLE_DBC, hDbc,
                         SQL_COMMIT);
             }
             else {
                 /* INSERT failed; abort the change */
                 (void) SQLEndTran(SQL_HANDLE_DBC, hDbc,
                         SQL_ROLLBACK);
             }
        }
        (void) SQLFreeHandle(SQL_HANDLE_STMT, hStmt);
    }

    return rc;
}
</pre>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright Â© 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#ODBCRM/Chpt_ExecStmt.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>