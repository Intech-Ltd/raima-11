<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="SQL API|ODBC User's Guide" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Allocating Handles</title>
        <link rel="icon" type="image/png" href="http://docs.raima.com/favicon.png" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/TableStyles/TwoColNoLines.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/raima.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="../../Default_CSH.htm#ODBCRM/Chpt_Handles.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../dbRSQL.htm">SQL API</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="dbODBCUG.htm">ODBC User's Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Allocating Handles</span>
        </div>
        <h2 class="newpage"><a MadCap:generatedBookmark="TOC" name="Allocating_Handles"></a>Allocating Handles</h2>
        <p>ODBC lets an application manage interactions with data sources through ODBC handles. An application tells the ODBC driver to allocate a handle by calling <code>SQLAllocHandle</code>. There are four types of ODBC handles.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Environment_Handle"></a><a name="Environm"></a>Environment Handle</h3>
        <p>An environment handle is the base handle that manages global resources and options for an application. An application can call <code>SQLAllocHandle</code> using <code>SQL_HANDLE_ENV</code> as the first argument in order to allocate an environment handle. An application must allocate an environment handle in order to access an <span class="MyVariablesProductShortName">RDM</span> data source. Multiple environment handles can be allocated inside an application.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Connection_Handle"></a>Connection Handle</h3>
        <p>A connection handle is the handle that manages resources and options specific to a connection to a data source. An application can call <code>SQLAllocHandle</code> using <code>SQL_HANDLE_DBC</code> as the first argument and an existing environment handle as the second in order to allocate a connection handle. An application must allocate a connection handle in order to access an <span class="MyVariablesProductShortName">RDM</span> data source. An application can allocate multiple connection handles on one environment handle in order to manage multiple connections to the same or different data sources.  In a multi-thread environment, <span class="MyVariablesProductShortName">RDM</span> ODBC requires that each thread have its own connection handle.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Statement_Handle"></a>Statement Handle</h3>
        <p>A statement handle is the handle that manages resources and options specific to a particular SQL statement operation. An application can call <code>SQLAllocHandle</code> using <code>SQL_HANDLE_STMT</code> as the first argument and an existing connection handle as the second in order to allocate a statement handle. An application must allocate a statement handle in order to execute SQL statements against an <span class="MyVariablesProductShortName">RDM</span> data source. An application can allocate multiple statement handles on one connection handle in order to execute different SQL statements on one data source. Operations such as positioned update and delete require the use of multiple statement handles on one connection.</p>
        <h3><a MadCap:generatedBookmark="TOC" name="Descriptor_Handle"></a>Descriptor Handle</h3>
        <p>A descriptor handle is the handle that manages the detailed characteristics and information both an application and the ODBC driver use internally. There are two types of descriptors: application descriptors and implementation descriptors. An application descriptor stores information an application maintains for its operations. An implementation descriptor stores information the ODBC driver uses internally. Both application and implementation descriptors have two subcategories: parameter descriptors and row descriptors. Together, there are four types of descriptor handles as below.</p>
        <table style="width: 100%;mc-table-style: url('../Resources/TableStyles/TwoColNoLines.css');margin-left: 0;margin-right: auto;caption-side: top;" class="TableStyle-TwoColNoLines" cellspacing="0">
            <col class="Column-Column1" style="width: 245px;" />
            <col class="Column-Column2" style="width: 50px;" />
            <col class="Column-Column1" />
            <tbody>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1">Application Parameter Descriptor</td>
                    <td class="BodyE-Column2-Body1" style="text-align: center;">APD</td>
                    <td class="BodyD-Column1-Body1">An APD maintains information about a dynamic parameter an application uses when executing an SQL statement.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1">Application Row Descriptor</td>
                    <td class="BodyE-Column2-Body1" style="text-align: center;">ARD</td>
                    <td class="BodyD-Column1-Body1">An ARD maintains information about a row/column returned to an application when it fetches data from a data source.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyE-Column1-Body1">Implementation Parameter Descriptor</td>
                    <td class="BodyE-Column2-Body1" style="text-align: center;">IPD</td>
                    <td class="BodyD-Column1-Body1">An IPD maintains information about a dynamic parameter the ODBC driver uses internally when an application executes an SQL statement.</td>
                </tr>
                <tr class="Body-Body1">
                    <td class="BodyB-Column1-Body1">Implementation Row Descriptor</td>
                    <td class="BodyB-Column2-Body1" style="text-align: center;">IRD</td>
                    <td class="BodyA-Column1-Body1">An IRD maintains information about a row/column defined on a data source from which an application fetches data.</td>
                </tr>
            </tbody>
        </table>
        <p>All the four descriptors are implicitly allocated by the ODBC driver. An application can explicitly allocate application descriptors (APD and ARD) by calling <code>SQLAllocHandle</code> using <code>SQL_HANDLE_DESC</code> as the first argument and an existing connection handle as the second, and tell the ODBC drivers to use them instead of the implicitly-allocated descriptors. Descriptors explicitly allocated by an application cannot be used as implementation descriptors (IPD and IRD).</p>
        <p>The following example illustrates how to allocate ODBC handles using <code>SQLAllocHandle</code>.</p>
        <p class="Caption">Example 1 Allocating handles</p><pre xml:space="preserve">#include "sqlext.h"

int main(void)
{
    SQLRETURN rc;
    SQLHENV   hEnv;
    SQLHDBC   hDbc;

    /* Allocate an environment handle */
    rc = SQLAllocHandle(SQL_HANDLE_ENV, NULL, &amp;hEnv);
    if (SQL_SUCCEEDED(rc)) {
        /* Allocate a connection handle */
        rc = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &amp;hDbc);
        if (SQL_SUCCEEDED(rc)) {
            /* Connect to the local data source. The code for
               connectToDataSource is shown in the next
               section */
            rc = connectToDataSource(hDbc);
            if (SQL_SUCCEEDED(rc)) {
                /* Do some database operations */
                rc = runDbOperations(hDbc);

                (void) SQLDisconnect(hDbc);
            }

            (void) SQLFreeHandle(SQL_HANDLE_DBC, hDbc);
        }

        (void) SQLFreeHandle(SQL_HANDLE_ENV, hEnv);
    }

    return 0;
}
</pre>
        <hr MadCap:conditions="Default.ScreenOnly" width="100%" size="0" align="center" />
        <p MadCap:conditions="Default.ScreenOnly" style="font-size: 8pt;"><span class="MyVariablesCopyright">Copyright Â© 2012, Raima Inc. All rights reserved.</span>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="../../Default_CSH.htm#ODBCRM/Chpt_Handles.htm" style="">Open topic with navigation</a>
        </p>
    </body>
</html>